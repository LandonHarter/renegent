
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  normalizedEmail String?

  apiKeys ApiKey[]
  providers Providers?
  models Model[]
  prompts Prompt[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Provider {
  OPENAI
  ANTHROPIC
  GOOGLE_GEN
  AZURE
  X
  DEEPSEEK
  PERPLEXITY
}

model Providers {
  id String @id
  
  openaiApiKey String?
  openaiBaseUrl String @default("https://api.openai.com/v1")

  anthropicApiKey String?
  anthropicBaseUrl String @default("https://api.anthropic.com/v1")

  googleGenApiKey String?
  googleGenBaseUrl String @default("https://generativelanguage.googleapis.com/v1beta")

  azureResourceName String?
  azureApiKey String?

  xApiKey String?
  xBaseurl String @default("https://api.x.ai/v1")

  deepseekApiKey String?
  deepseekBaseUrl String @default("https://api.deepseek.com/v1")

  perplexityApiKey String?
  perplexityBaseUrl String @default("https://api.perplexity.ai")

  

  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model ApiKey {
  id String @id @default(uuid())
  key String @unique

  enabled Boolean @default(true)

  name String
  createdAt DateTime @default(now())
  lastUsed DateTime?

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Model {
  id String @id @default(uuid())

  name String
  modelId String

  provider Provider
  providerModelId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prompts Prompt[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Prompt {
  id String @id @default(uuid())
  promptId String

  name String
  prompt String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variables String[] @default([])

  models Model[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}